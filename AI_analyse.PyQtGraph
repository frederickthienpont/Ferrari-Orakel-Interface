from PyQt5.QtWidgets import QVBoxLayout, QLabel, QPushButton, QWidget, QGraphicsEllipseItem, QGraphicsScene, QGraphicsView
from PyQt5.QtCore import Qt

class FerrariRingController(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        self.status_label = QLabel("Ring Controller: Wacht op actie", self)
        layout.addWidget(self.status_label)

        # Simulatie van een ring-controller
        self.scene = QGraphicsScene()
        self.view = QGraphicsView(self.scene)
        self.view.setRenderHint(QPainter.Antialiasing)
        self.view.setRenderHint(QPainter.SmoothPixmapTransform)
        layout.addWidget(self.view)

        # Ring als een eenvoudige cirkel
        self.ring = QGraphicsEllipseItem(0, 0, 100, 100)
        self.ring.setBrush(Qt.red)
        self.ring.setFlag(QGraphicsEllipseItem.ItemIsMovable)

        self.scene.addItem(self.ring)

        # Actieknop voor het starten van de gesprek
        self.start_button = QPushButton("Start Gesprek", self)
        self.start_button.clicked.connect(self.start_conversation)
        layout.addWidget(self.start_button)

        self.setLayout(layout)

    def start_conversation(self):
        # Actie wanneer de ring wordt geklikt
        self.status_label.setText("Gesprek gestart! Ring geactiveerd.")
        print("Gesprek gestart, ring geactiveerd!")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = FerrariRingController()
    window.setWindowTitle("Ferrari Talisman Ring Controller")
    window.resize(400, 300)
    window.show()
    sys.exit(app.exec_())
