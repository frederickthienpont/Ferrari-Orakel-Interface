import tkinter as tk
from tkinter import messagebox, filedialog
from datetime import datetime
import json

# Dummy user database
users = {
    "admin": "password123",
    "oracle": "ringmaster"
}

# Gesprekslog en andere opslag
conversation_log = []
ring_collection = []
finance_log = []

# Symbolische parser
symbol_keywords = ["ferrari", "ring", "talisman", "maan", "zodiak", "oracle"]

def login():
    username = username_entry.get()
    password = password_entry.get()
    if username in users and users[username] == password:
        messagebox.showinfo("Login", f"Welkom {username}! De interface wordt geladen...")
        root.destroy()
        load_main_interface(username)
    else:
        messagebox.showerror("Fout", "Ongeldige gebruikersnaam of wachtwoord.")

def load_main_interface(username):
    main = tk.Tk()
    main.title("Ferrari Oracle Interface v1.0")
    main.geometry("700x650")

    tk.Label(main, text=f"Ingelogd als: {username}", font=("Arial", 10)).pack(pady=5)

    conversation_text = tk.Text(main, height=8, width=80)
    conversation_text.pack(pady=10)

    def analyse_conversation():
        text = conversation_text.get("1.0", tk.END).strip()
        if text:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            entry = {"tijd": timestamp, "tekst": text}
            conversation_log.append(entry)

            found_symbols = [word for word in symbol_keywords if word in text.lower()]
            if found_symbols:
                ring_collection.extend(found_symbols)

            finance_log.append({"actie": "gesprek analyse", "tijd": timestamp, "waarde": 5})
            messagebox.showinfo("Analyse", f"Gesprek geanalyseerd. Symbolen: {', '.join(found_symbols) if found_symbols else 'geen'}")
            conversation_text.delete("1.0", tk.END)
        else:
            messagebox.showwarning("Leeg", "Voer een gesprek in om te analyseren.")

    analyse_btn = tk.Button(main, text="Analyseer Gesprek", command=analyse_conversation)
    analyse_btn.pack(pady=5)

    def show_log():
        log_window = tk.Toplevel(main)
        log_window.title("Gesprekslog")
        log_window.geometry("600x400")
        log_text = tk.Text(log_window, wrap=tk.WORD)
        log_text.pack(expand=True, fill=tk.BOTH)
        for item in conversation_log:
            log_text.insert(tk.END, f"[{item['tijd']}] {item['tekst']}\n")

    log_btn = tk.Button(main, text="Bekijk Gesprekslog", command=show_log)
    log_btn.pack(pady=5)

    def show_rings():
        ring_window = tk.Toplevel(main)
        ring_window.title("Talisman & Ring Collectie")
        ring_window.geometry("400x300")
        ring_text = tk.Text(ring_window)
        ring_text.pack(expand=True, fill=tk.BOTH)
        unique_rings = list(set(ring_collection))
        for ring in unique_rings:
            ring_text.insert(tk.END, f"- {ring}\n")

    ring_btn = tk.Button(main, text="Bekijk Ring Collectie", command=show_rings)
    ring_btn.pack(pady=5)

    def show_finances():
        fin_window = tk.Toplevel(main)
        fin_window.title("Financiële Accumulatie")
        fin_window.geometry("400x300")
        fin_text = tk.Text(fin_window)
        fin_text.pack(expand=True, fill=tk.BOTH)
        totaal = 0
        for entry in finance_log:
            fin_text.insert(tk.END, f"[{entry['tijd']}] {entry['actie']}: +{entry['waarde']}\n")
            totaal += entry['waarde']
        fin_text.insert(tk.END, f"\nTOTAAL: {totaal}")

    fin_btn = tk.Button(main, text="Bekijk Financiën", command=show_finances)
    fin_btn.pack(pady=5)

    def diagnostic_view():
        diag_window = tk.Toplevel(main)
        diag_window.title("Diagnostische Weergave")
        diag_window.geometry("500x300")
        diag_text = tk.Text(diag_window)
        diag_text.pack(expand=True, fill=tk.BOTH)

        last_conv = conversation_log[-1]['tekst'] if conversation_log else "geen"
        diag_text.insert(tk.END, f"Laatste gesprek:\n{last_conv}\n\n")
        diag_text.insert(tk.END, f"Aantal unieke symbolen: {len(set(ring_collection))}\n")
        diag_text.insert(tk.END, f"Totaalwaarde analysepunten: {sum([f['waarde'] for f in finance_log])}\n")

    diag_btn = tk.Button(main, text="Diagnostisch Scherm", command=diagnostic_view)
    diag_btn.pack(pady=5)

    def export_json():
        data = {
            "gesprekken": conversation_log,
            "symbolen": list(set(ring_collection)),
            "financien": finance_log
        }
        file_path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON bestanden", "*.json")])
        if file_path:
            with open(file_path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            messagebox.showinfo("Export", "Data succesvol geëxporteerd als JSON.")

    export_btn = tk.Button(main, text="Exporteer als JSON", command=export_json)
    export_btn.pack(pady=5)

    main.mainloop()

# Login venster
root = tk.Tk()
root.title("Login - Ferrari Oracle Interface")
root.geometry("300x200")

tk.Label(root, text="Gebruikersnaam:").pack(pady=5)
username_entry = tk.Entry(root)
username_entry.pack()

tk.Label(root, text="Wachtwoord:").pack(pady=5)
password_entry = tk.Entry(root, show="*")
password_entry.pack()

login_btn = tk.Button(root, text="Login", command=login)
login_btn.pack(pady=20)

root.mainloop()
